import { createClient } from '@supabase/supabase-js'

// Validar variables de entorno - SIN FALLBACKS por seguridad
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || supabaseUrl === 'undefined') {
  console.error('‚ùå NEXT_PUBLIC_SUPABASE_URL no est√° configurada');
  throw new Error('NEXT_PUBLIC_SUPABASE_URL is required');
}

if (!supabaseAnonKey || supabaseAnonKey === 'undefined') {
  console.error('‚ùå NEXT_PUBLIC_SUPABASE_ANON_KEY no est√° configurada');
  throw new Error('NEXT_PUBLIC_SUPABASE_ANON_KEY is required');
}

console.log('‚úÖ Supabase client configurado:', { 
  url: supabaseUrl, 
  keyLength: supabaseAnonKey.length,
  env: process.env.NODE_ENV
});

// Crear cliente √∫nico con configuraci√≥n espec√≠fica para evitar m√∫ltiples instancias
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

// DEBUG: Probar conexi√≥n b√°sica
console.log('üîç Probando conexi√≥n con Supabase...');
(async () => {
  try {
    const result = await supabase.from('zonas').select('count').single();
    if (result.error) {
      console.error('‚ùå Error de conexi√≥n:', result.error);
    } else {
      console.log('‚úÖ Conexi√≥n exitosa con Supabase');
    }
  } catch (err) {
    console.error('‚ùå Failed to fetch - Error de red:', err);
  }
})();
